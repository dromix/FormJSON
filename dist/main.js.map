{"version":3,"sources":["webpack://intern-part/./src/ts/FormatConvertor/Convertor.ts","webpack://intern-part/./src/ts/FormBuilder/FormBuilder.ts","webpack://intern-part/./src/ts/FactoryInput/FactoryInput.ts","webpack://intern-part/./src/ts/FormBuilder/Director.ts","webpack://intern-part/./src/ts/FormCDA/FormCDA.ts","webpack://intern-part/./src/ts/service/PostService.ts","webpack://intern-part/./src/ts/FormFacade/FormFacade.ts","webpack://intern-part/./src/ts/index.ts"],"names":["convert","formSettings","JSON","parse","map","item","type","startsWith","tag","charAt","length","fieldType","reference","temp","name","this","form","document","createElement","setAttribute","addTitle","label","title","innerText","appendChild","addInput","input","addSubmit","button","build","render","getKeyValue","obj","key","createInput","Factory","list","text","InputText","number","InputNumber","InputFactory","setBuilder","builder","make","forEach","prop","Error","connected","getInstance","Singleton","INSTANCE","onSubmit","event","preventDefault","formData","FormData","json","stringify","Object","fromEntries","entries","console","log","alert","url","data","fetch","method","headers","body","postData","then","connectForm","addEventListener","reset","removeEventListener","convertor","formBuilder","director","singleton","makeForm","objProperties","querySelector","clearData","Сonvertor","FormBuilder","Director","formJSON"],"mappings":"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","file":"main.js","sourcesContent":["import {formSettings} from '../interface/interface';\r\n\r\nexport class Сonvertor {\r\n\r\n  convert(formSettings:string):[] {\r\n    const obj = JSON.parse(formSettings);\r\n    return obj.map((item: formSettings) => {\r\n      if (item.type.startsWith('header')) {\r\n          return {...item, type:'title', tag: `h${item.type.charAt(item.type.length-1)}`}\r\n      }\r\n\r\n      if (item.type === 'input') {\r\n          const {fieldType, reference, ...temp} = item;\r\n          return {...temp, type: `input-${fieldType}`, name: reference}\r\n      }\r\n\r\n      if (item.type === 'CTA') {\r\n          return {...item, type: 'submit'}\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n","import {TitleProps} from '../interface/interface';\r\nimport {Input} from '../interface/interface';\r\nexport class FormBuilder {\r\n    form: HTMLFormElement;\r\n    constructor() {\r\n        this.form = document.createElement('form');\r\n        this.form.setAttribute('action', '#');\r\n    }\r\n  \r\n    addTitle({tag='h1', label=''}:TitleProps) {\r\n        const title = document.createElement(tag);\r\n        title.innerText = label;\r\n        this.form.appendChild(title);\r\n        return this;\r\n    }\r\n  \r\n    addInput({input, label}: Input) {\r\n      if (label) {\r\n        this.form.appendChild(label)\r\n      }\r\n      this.form.appendChild(input);\r\n      return this;\r\n    }\r\n  \r\n    addSubmit(label: string = 'Submit') {\r\n      const button = document.createElement('button');\r\n      button.setAttribute('type', 'submit');\r\n      button.innerText = label;\r\n      this.form.appendChild(button);\r\n      return this;\r\n    }\r\n  \r\n    build():HTMLFormElement {\r\n        return this.form;\r\n    }\r\n}\r\n","import {Input} from '../interface/interface';\r\ninterface ITextInput { \r\n    label: string;\r\n    name: string;\r\n}\r\n\r\ninterface INumberInput {\r\n    label: string;\r\n    name: string;\r\n}\r\nclass InputText implements ITextInput {\r\n    label: string;\r\n    name: string;\r\n\r\n    constructor(label:string, name: string){\r\n        this.label = label;\r\n        this.name = name;\r\n    }\r\n\r\n    render(): Input {\r\n        const input = document.createElement('input');\r\n        const label = document.createElement('label');\r\n        input.setAttribute('type', 'text');\r\n        input.setAttribute('name', this.name);\r\n        this.name ? label.setAttribute('for', this.name) : null\r\n        label.innerText = this.label;\r\n        return {input, label};\r\n    }\r\n}\r\n\r\nclass InputNumber implements INumberInput {\r\n    label: string;\r\n    name: string;\r\n\r\n    constructor(label:string, name: string){\r\n        this.label = label;\r\n        this.name = name;\r\n    }\r\n\r\n    render(): Input {\r\n        const input = document.createElement('input');\r\n        const label = document.createElement('label');\r\n        input.setAttribute('type', 'number');\r\n        input.setAttribute('name', this.name);\r\n        this.name ? label.setAttribute('for', this.name) : null\r\n        label.innerText = this.label;\r\n        return {input, label};\r\n    }\r\n}\r\nclass Factory { \r\n    static list: {[key:string]: typeof InputText | typeof InputNumber} = {\r\n        text: InputText,\r\n        number: InputNumber\r\n    }\r\n\r\n    private getKeyValue = <T extends object, U extends keyof T>(obj: T) => (key: U) =>\r\n    obj[key];\r\n\r\n    createInput(type: string, label= '', name=''): Input {\r\n        const InputType = this.getKeyValue(Factory.list)(type)\r\n        const Input = new InputType(label, name);\r\n        return Input.render()\r\n    }\r\n}\r\n\r\n\r\nexport function InputFactory({type='text', label='', name=''}) {\r\n    const factory = new Factory();\r\n    return factory.createInput(type, label, name);\r\n}\r\n","import { InputFactory } from '../FactoryInput/FactoryInput';\r\nimport {FormBuilder} from './FormBuilder';\r\nimport {formProperties} from '../interface/interface';\r\n\r\nexport class Director {\r\n    private builder: FormBuilder;\r\n\r\n    setBuilder(builder: FormBuilder) {\r\n        this.builder = builder;\r\n        return this;\r\n    }\r\n\r\n    make(formSettings: []) {\r\n        formSettings.forEach((prop: formProperties) => {\r\n            switch (prop.type) {\r\n                case 'title':\r\n                    return this.builder.addTitle({tag: prop.tag, label: prop.label})\r\n                case 'input-number':\r\n                    return this.builder.addInput({...InputFactory({type: 'number', label:prop.label, name:prop.name})});\r\n                case 'input-text': \r\n                    return this.builder.addInput({...InputFactory({type: 'text', label:prop.label, name:prop.name})});\r\n                case 'submit':\r\n                    return this.builder.addSubmit(prop.label);\r\n                default:\r\n                    throw new Error('You should provide correct form settings');\r\n            }\r\n        }\r\n        );\r\n    }\r\n}","import {postData} from '../service/PostService';\r\n\r\nexport class Singleton {\r\n    private static INSTANCE: Singleton;\r\n\r\n    private connected = false;\r\n    private form: HTMLFormElement;\r\n\r\n    private constructor() {}\r\n\r\n    static getInstance(): Singleton {\r\n        if (!Singleton.INSTANCE) {\r\n            Singleton.INSTANCE = new Singleton();\r\n        }\r\n\r\n        return Singleton.INSTANCE;\r\n    }\r\n\r\n\r\n\r\n    onSubmit(event: Event) {\r\n        event.preventDefault();\r\n        const formData:FormData = new FormData(this.form);\r\n        const json = JSON.stringify(Object.fromEntries(formData.entries()));\r\n        console.log(json, formData, event);\r\n        debugger;\r\n        alert(1);\r\n        postData('http://localhost:3000/posts', json)\r\n        .then((data: Response) => {\r\n            console.log(data);\r\n        })\r\n    }\r\n\r\n    connectForm(form: HTMLFormElement): void{\r\n        if (!this.connected) {\r\n            this.connected = true;\r\n            this.form = form;\r\n            this.form.addEventListener('submit', this.onSubmit);\r\n            console.log('Connection successful');\r\n            console.log(this.form);\r\n        }\r\n    }\r\n\r\n\r\n    reset() {\r\n        this.form.removeEventListener('submit', this.onSubmit);\r\n        this.connected = false;\r\n    }\r\n}","export async function postData(url: string, data: string) {\r\n    const res = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-type':'application/json'\r\n        },\r\n        body: data\r\n    });\r\n\r\n    return await res.json();\r\n}\r\n","import {Сonvertor} from '../FormatConvertor/Convertor';\r\nimport {FormBuilder} from '../FormBuilder/FormBuilder';\r\nimport {Director} from '../FormBuilder/Director';\r\nimport {Singleton} from '../FormCDA/FormCDA';\r\nclass FormFacade {\r\n    private convertor: Сonvertor;\r\n    private formBuilder: FormBuilder;\r\n    private director: Director;\r\n    private singleton: Singleton;\r\n\r\n    constructor(convertor: Сonvertor, formBuilder:FormBuilder, director: Director, singleton: Singleton) {\r\n        this.convertor = convertor;\r\n        this.formBuilder = formBuilder;\r\n        this.director = director;\r\n        this.singleton = singleton;\r\n    }\r\n\r\n    makeForm(formSettings: string) {\r\n        const objProperties = this.convertor.convert(formSettings);\r\n        const builder = this.formBuilder;\r\n        this.director.setBuilder(builder);\r\n        this.director.make(objProperties);\r\n        const form = builder.build();\r\n        const app = document.querySelector('#app');\r\n        app.appendChild(form);\r\n        this.singleton.connectForm(document.querySelector('#app form'));\r\n\r\n    }\r\n\r\n    clearData() {\r\n        this.singleton.reset();\r\n    }\r\n}\r\n\r\nconst convertor = new Сonvertor();\r\nconst formBuilder = new FormBuilder();\r\nconst director = new Director();\r\nconst singleton = Singleton.getInstance();\r\nconst FormGenerator = new FormFacade(convertor, formBuilder, director, singleton);\r\n\r\n\r\nexport default FormGenerator;","import FormGenerator from '../ts/FormFacade/FormFacade';\r\n\r\nconst formJSON = JSON.stringify([\r\n  { type: 'header-level-2', label: 'Name yourself' },\r\n  { type: 'input', fieldType: 'number', label: 'Your name', reference: 'name'},\r\n  { type: 'input', fieldType: 'text', reference: 'name2'},\r\n  { type: 'CTA', label: 'This is it'}\r\n])\r\n\r\n\r\nFormGenerator.makeForm(formJSON);\r\n//setTimeout(FormGenerator.makeForm(formJSON, 'JSON'));\r\n\r\n//TODO transfer to makeForm\r\n//const placeForForm = document.querySelector('#form');\r\n//placeForForm.appendChild(newForm);\r\n\r\n"],"sourceRoot":""}